// CUSF mainchain validator service 

// @generated by protoc-gen-es v2.2.5 with parameter "js_import_style=legacy_commonjs"
// @generated from file cusf/mainchain/v1/validator.proto (package cusf.mainchain.v1, syntax proto3)
/* eslint-disable */

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });

const { enumDesc, fileDesc, messageDesc, serviceDesc, tsEnum } = require("@bufbuild/protobuf/codegenv1");
const { file_google_protobuf_wrappers } = require("@bufbuild/protobuf/wkt");
const { file_cusf_common_v1_common } = require("../../common/v1/common_pb");
const { file_cusf_mainchain_v1_common } = require("./common_pb");

/**
 * Describes the file cusf/mainchain/v1/validator.proto.
 */
const file_cusf_mainchain_v1_validator = /*@__PURE__*/
  fileDesc("", [file_google_protobuf_wrappers, file_cusf_common_v1_common, file_cusf_mainchain_v1_common]);

/**
 * Describes the message cusf.mainchain.v1.BlockHeaderInfo.
 * Use `create(BlockHeaderInfoSchema)` to create a new message.
 */
const BlockHeaderInfoSchema = /*@__PURE__*/
  messageDesc(file_cusf_mainchain_v1_validator, 0);

/**
 * Describes the message cusf.mainchain.v1.Deposit.
 * Use `create(DepositSchema)` to create a new message.
 */
const DepositSchema = /*@__PURE__*/
  messageDesc(file_cusf_mainchain_v1_validator, 1);

/**
 * Describes the message cusf.mainchain.v1.Deposit.Output.
 * Use `create(Deposit_OutputSchema)` to create a new message.
 */
const Deposit_OutputSchema = /*@__PURE__*/
  messageDesc(file_cusf_mainchain_v1_validator, 1, 0);

/**
 * Describes the message cusf.mainchain.v1.WithdrawalBundleEvent.
 * Use `create(WithdrawalBundleEventSchema)` to create a new message.
 */
const WithdrawalBundleEventSchema = /*@__PURE__*/
  messageDesc(file_cusf_mainchain_v1_validator, 2);

/**
 * Describes the message cusf.mainchain.v1.WithdrawalBundleEvent.Event.
 * Use `create(WithdrawalBundleEvent_EventSchema)` to create a new message.
 */
const WithdrawalBundleEvent_EventSchema = /*@__PURE__*/
  messageDesc(file_cusf_mainchain_v1_validator, 2, 0);

/**
 * Describes the message cusf.mainchain.v1.WithdrawalBundleEvent.Event.Failed.
 * Use `create(WithdrawalBundleEvent_Event_FailedSchema)` to create a new message.
 */
const WithdrawalBundleEvent_Event_FailedSchema = /*@__PURE__*/
  messageDesc(file_cusf_mainchain_v1_validator, 2, 0, 0);

/**
 * Describes the message cusf.mainchain.v1.WithdrawalBundleEvent.Event.Succeeded.
 * Use `create(WithdrawalBundleEvent_Event_SucceededSchema)` to create a new message.
 */
const WithdrawalBundleEvent_Event_SucceededSchema = /*@__PURE__*/
  messageDesc(file_cusf_mainchain_v1_validator, 2, 0, 1);

/**
 * Describes the message cusf.mainchain.v1.WithdrawalBundleEvent.Event.Submitted.
 * Use `create(WithdrawalBundleEvent_Event_SubmittedSchema)` to create a new message.
 */
const WithdrawalBundleEvent_Event_SubmittedSchema = /*@__PURE__*/
  messageDesc(file_cusf_mainchain_v1_validator, 2, 0, 2);

/**
 * Describes the message cusf.mainchain.v1.BlockInfo.
 * Use `create(BlockInfoSchema)` to create a new message.
 */
const BlockInfoSchema = /*@__PURE__*/
  messageDesc(file_cusf_mainchain_v1_validator, 3);

/**
 * Describes the message cusf.mainchain.v1.BlockInfo.Event.
 * Use `create(BlockInfo_EventSchema)` to create a new message.
 */
const BlockInfo_EventSchema = /*@__PURE__*/
  messageDesc(file_cusf_mainchain_v1_validator, 3, 0);

/**
 * Describes the message cusf.mainchain.v1.GetBlockHeaderInfoRequest.
 * Use `create(GetBlockHeaderInfoRequestSchema)` to create a new message.
 */
const GetBlockHeaderInfoRequestSchema = /*@__PURE__*/
  messageDesc(file_cusf_mainchain_v1_validator, 4);

/**
 * Describes the message cusf.mainchain.v1.GetBlockHeaderInfoResponse.
 * Use `create(GetBlockHeaderInfoResponseSchema)` to create a new message.
 */
const GetBlockHeaderInfoResponseSchema = /*@__PURE__*/
  messageDesc(file_cusf_mainchain_v1_validator, 5);

/**
 * Describes the message cusf.mainchain.v1.GetBlockInfoRequest.
 * Use `create(GetBlockInfoRequestSchema)` to create a new message.
 */
const GetBlockInfoRequestSchema = /*@__PURE__*/
  messageDesc(file_cusf_mainchain_v1_validator, 6);

/**
 * Describes the message cusf.mainchain.v1.GetBlockInfoResponse.
 * Use `create(GetBlockInfoResponseSchema)` to create a new message.
 */
const GetBlockInfoResponseSchema = /*@__PURE__*/
  messageDesc(file_cusf_mainchain_v1_validator, 7);

/**
 * Describes the message cusf.mainchain.v1.GetBlockInfoResponse.Info.
 * Use `create(GetBlockInfoResponse_InfoSchema)` to create a new message.
 */
const GetBlockInfoResponse_InfoSchema = /*@__PURE__*/
  messageDesc(file_cusf_mainchain_v1_validator, 7, 0);

/**
 * Describes the message cusf.mainchain.v1.GetBmmHStarCommitmentRequest.
 * Use `create(GetBmmHStarCommitmentRequestSchema)` to create a new message.
 */
const GetBmmHStarCommitmentRequestSchema = /*@__PURE__*/
  messageDesc(file_cusf_mainchain_v1_validator, 8);

/**
 * Describes the message cusf.mainchain.v1.GetBmmHStarCommitmentResponse.
 * Use `create(GetBmmHStarCommitmentResponseSchema)` to create a new message.
 */
const GetBmmHStarCommitmentResponseSchema = /*@__PURE__*/
  messageDesc(file_cusf_mainchain_v1_validator, 9);

/**
 * Describes the message cusf.mainchain.v1.GetBmmHStarCommitmentResponse.BlockNotFoundError.
 * Use `create(GetBmmHStarCommitmentResponse_BlockNotFoundErrorSchema)` to create a new message.
 */
const GetBmmHStarCommitmentResponse_BlockNotFoundErrorSchema = /*@__PURE__*/
  messageDesc(file_cusf_mainchain_v1_validator, 9, 0);

/**
 * Describes the message cusf.mainchain.v1.GetBmmHStarCommitmentResponse.OptionalCommitment.
 * Use `create(GetBmmHStarCommitmentResponse_OptionalCommitmentSchema)` to create a new message.
 */
const GetBmmHStarCommitmentResponse_OptionalCommitmentSchema = /*@__PURE__*/
  messageDesc(file_cusf_mainchain_v1_validator, 9, 1);

/**
 * Describes the message cusf.mainchain.v1.GetBmmHStarCommitmentResponse.Commitment.
 * Use `create(GetBmmHStarCommitmentResponse_CommitmentSchema)` to create a new message.
 */
const GetBmmHStarCommitmentResponse_CommitmentSchema = /*@__PURE__*/
  messageDesc(file_cusf_mainchain_v1_validator, 9, 2);

/**
 * Describes the message cusf.mainchain.v1.GetChainInfoRequest.
 * Use `create(GetChainInfoRequestSchema)` to create a new message.
 */
const GetChainInfoRequestSchema = /*@__PURE__*/
  messageDesc(file_cusf_mainchain_v1_validator, 10);

/**
 * Describes the message cusf.mainchain.v1.GetChainInfoResponse.
 * Use `create(GetChainInfoResponseSchema)` to create a new message.
 */
const GetChainInfoResponseSchema = /*@__PURE__*/
  messageDesc(file_cusf_mainchain_v1_validator, 11);

/**
 * Describes the message cusf.mainchain.v1.GetChainTipRequest.
 * Use `create(GetChainTipRequestSchema)` to create a new message.
 */
const GetChainTipRequestSchema = /*@__PURE__*/
  messageDesc(file_cusf_mainchain_v1_validator, 12);

/**
 * Describes the message cusf.mainchain.v1.GetChainTipResponse.
 * Use `create(GetChainTipResponseSchema)` to create a new message.
 */
const GetChainTipResponseSchema = /*@__PURE__*/
  messageDesc(file_cusf_mainchain_v1_validator, 13);

/**
 * Describes the message cusf.mainchain.v1.GetCoinbasePSBTRequest.
 * Use `create(GetCoinbasePSBTRequestSchema)` to create a new message.
 */
const GetCoinbasePSBTRequestSchema = /*@__PURE__*/
  messageDesc(file_cusf_mainchain_v1_validator, 14);

/**
 * Describes the message cusf.mainchain.v1.GetCoinbasePSBTRequest.ProposeSidechain.
 * Use `create(GetCoinbasePSBTRequest_ProposeSidechainSchema)` to create a new message.
 */
const GetCoinbasePSBTRequest_ProposeSidechainSchema = /*@__PURE__*/
  messageDesc(file_cusf_mainchain_v1_validator, 14, 0);

/**
 * Describes the message cusf.mainchain.v1.GetCoinbasePSBTRequest.AckSidechain.
 * Use `create(GetCoinbasePSBTRequest_AckSidechainSchema)` to create a new message.
 */
const GetCoinbasePSBTRequest_AckSidechainSchema = /*@__PURE__*/
  messageDesc(file_cusf_mainchain_v1_validator, 14, 1);

/**
 * Describes the message cusf.mainchain.v1.GetCoinbasePSBTRequest.ProposeBundle.
 * Use `create(GetCoinbasePSBTRequest_ProposeBundleSchema)` to create a new message.
 */
const GetCoinbasePSBTRequest_ProposeBundleSchema = /*@__PURE__*/
  messageDesc(file_cusf_mainchain_v1_validator, 14, 2);

/**
 * Describes the message cusf.mainchain.v1.GetCoinbasePSBTRequest.AckBundles.
 * Use `create(GetCoinbasePSBTRequest_AckBundlesSchema)` to create a new message.
 */
const GetCoinbasePSBTRequest_AckBundlesSchema = /*@__PURE__*/
  messageDesc(file_cusf_mainchain_v1_validator, 14, 3);

/**
 * Describes the message cusf.mainchain.v1.GetCoinbasePSBTRequest.AckBundles.RepeatPrevious.
 * Use `create(GetCoinbasePSBTRequest_AckBundles_RepeatPreviousSchema)` to create a new message.
 */
const GetCoinbasePSBTRequest_AckBundles_RepeatPreviousSchema = /*@__PURE__*/
  messageDesc(file_cusf_mainchain_v1_validator, 14, 3, 0);

/**
 * Describes the message cusf.mainchain.v1.GetCoinbasePSBTRequest.AckBundles.LeadingBy50.
 * Use `create(GetCoinbasePSBTRequest_AckBundles_LeadingBy50Schema)` to create a new message.
 */
const GetCoinbasePSBTRequest_AckBundles_LeadingBy50Schema = /*@__PURE__*/
  messageDesc(file_cusf_mainchain_v1_validator, 14, 3, 1);

/**
 * Describes the message cusf.mainchain.v1.GetCoinbasePSBTRequest.AckBundles.Upvotes.
 * Use `create(GetCoinbasePSBTRequest_AckBundles_UpvotesSchema)` to create a new message.
 */
const GetCoinbasePSBTRequest_AckBundles_UpvotesSchema = /*@__PURE__*/
  messageDesc(file_cusf_mainchain_v1_validator, 14, 3, 2);

/**
 * Describes the message cusf.mainchain.v1.GetCoinbasePSBTResponse.
 * Use `create(GetCoinbasePSBTResponseSchema)` to create a new message.
 */
const GetCoinbasePSBTResponseSchema = /*@__PURE__*/
  messageDesc(file_cusf_mainchain_v1_validator, 15);

/**
 * Describes the message cusf.mainchain.v1.GetCtipRequest.
 * Use `create(GetCtipRequestSchema)` to create a new message.
 */
const GetCtipRequestSchema = /*@__PURE__*/
  messageDesc(file_cusf_mainchain_v1_validator, 16);

/**
 * Describes the message cusf.mainchain.v1.GetCtipResponse.
 * Use `create(GetCtipResponseSchema)` to create a new message.
 */
const GetCtipResponseSchema = /*@__PURE__*/
  messageDesc(file_cusf_mainchain_v1_validator, 17);

/**
 * Describes the message cusf.mainchain.v1.GetCtipResponse.Ctip.
 * Use `create(GetCtipResponse_CtipSchema)` to create a new message.
 */
const GetCtipResponse_CtipSchema = /*@__PURE__*/
  messageDesc(file_cusf_mainchain_v1_validator, 17, 0);

/**
 * Describes the message cusf.mainchain.v1.GetSidechainProposalsRequest.
 * Use `create(GetSidechainProposalsRequestSchema)` to create a new message.
 */
const GetSidechainProposalsRequestSchema = /*@__PURE__*/
  messageDesc(file_cusf_mainchain_v1_validator, 18);

/**
 * Describes the message cusf.mainchain.v1.GetSidechainProposalsResponse.
 * Use `create(GetSidechainProposalsResponseSchema)` to create a new message.
 */
const GetSidechainProposalsResponseSchema = /*@__PURE__*/
  messageDesc(file_cusf_mainchain_v1_validator, 19);

/**
 * Describes the message cusf.mainchain.v1.GetSidechainProposalsResponse.SidechainProposal.
 * Use `create(GetSidechainProposalsResponse_SidechainProposalSchema)` to create a new message.
 */
const GetSidechainProposalsResponse_SidechainProposalSchema = /*@__PURE__*/
  messageDesc(file_cusf_mainchain_v1_validator, 19, 0);

/**
 * Describes the message cusf.mainchain.v1.GetSidechainsRequest.
 * Use `create(GetSidechainsRequestSchema)` to create a new message.
 */
const GetSidechainsRequestSchema = /*@__PURE__*/
  messageDesc(file_cusf_mainchain_v1_validator, 20);

/**
 * Describes the message cusf.mainchain.v1.GetSidechainsResponse.
 * Use `create(GetSidechainsResponseSchema)` to create a new message.
 */
const GetSidechainsResponseSchema = /*@__PURE__*/
  messageDesc(file_cusf_mainchain_v1_validator, 21);

/**
 * Describes the message cusf.mainchain.v1.GetSidechainsResponse.SidechainInfo.
 * Use `create(GetSidechainsResponse_SidechainInfoSchema)` to create a new message.
 */
const GetSidechainsResponse_SidechainInfoSchema = /*@__PURE__*/
  messageDesc(file_cusf_mainchain_v1_validator, 21, 0);

/**
 * Describes the message cusf.mainchain.v1.GetTwoWayPegDataRequest.
 * Use `create(GetTwoWayPegDataRequestSchema)` to create a new message.
 */
const GetTwoWayPegDataRequestSchema = /*@__PURE__*/
  messageDesc(file_cusf_mainchain_v1_validator, 22);

/**
 * Describes the message cusf.mainchain.v1.GetTwoWayPegDataResponse.
 * Use `create(GetTwoWayPegDataResponseSchema)` to create a new message.
 */
const GetTwoWayPegDataResponseSchema = /*@__PURE__*/
  messageDesc(file_cusf_mainchain_v1_validator, 23);

/**
 * Describes the message cusf.mainchain.v1.GetTwoWayPegDataResponse.ResponseItem.
 * Use `create(GetTwoWayPegDataResponse_ResponseItemSchema)` to create a new message.
 */
const GetTwoWayPegDataResponse_ResponseItemSchema = /*@__PURE__*/
  messageDesc(file_cusf_mainchain_v1_validator, 23, 0);

/**
 * Describes the message cusf.mainchain.v1.SubscribeEventsRequest.
 * Use `create(SubscribeEventsRequestSchema)` to create a new message.
 */
const SubscribeEventsRequestSchema = /*@__PURE__*/
  messageDesc(file_cusf_mainchain_v1_validator, 24);

/**
 * Describes the message cusf.mainchain.v1.SubscribeEventsResponse.
 * Use `create(SubscribeEventsResponseSchema)` to create a new message.
 */
const SubscribeEventsResponseSchema = /*@__PURE__*/
  messageDesc(file_cusf_mainchain_v1_validator, 25);

/**
 * Describes the message cusf.mainchain.v1.SubscribeEventsResponse.Event.
 * Use `create(SubscribeEventsResponse_EventSchema)` to create a new message.
 */
const SubscribeEventsResponse_EventSchema = /*@__PURE__*/
  messageDesc(file_cusf_mainchain_v1_validator, 25, 0);

/**
 * Describes the message cusf.mainchain.v1.SubscribeEventsResponse.Event.ConnectBlock.
 * Use `create(SubscribeEventsResponse_Event_ConnectBlockSchema)` to create a new message.
 */
const SubscribeEventsResponse_Event_ConnectBlockSchema = /*@__PURE__*/
  messageDesc(file_cusf_mainchain_v1_validator, 25, 0, 0);

/**
 * Describes the message cusf.mainchain.v1.SubscribeEventsResponse.Event.DisconnectBlock.
 * Use `create(SubscribeEventsResponse_Event_DisconnectBlockSchema)` to create a new message.
 */
const SubscribeEventsResponse_Event_DisconnectBlockSchema = /*@__PURE__*/
  messageDesc(file_cusf_mainchain_v1_validator, 25, 0, 1);

/**
 * Describes the message cusf.mainchain.v1.SubscribeHeaderSyncProgressRequest.
 * Use `create(SubscribeHeaderSyncProgressRequestSchema)` to create a new message.
 */
const SubscribeHeaderSyncProgressRequestSchema = /*@__PURE__*/
  messageDesc(file_cusf_mainchain_v1_validator, 26);

/**
 * Describes the message cusf.mainchain.v1.SubscribeHeaderSyncProgressResponse.
 * Use `create(SubscribeHeaderSyncProgressResponseSchema)` to create a new message.
 */
const SubscribeHeaderSyncProgressResponseSchema = /*@__PURE__*/
  messageDesc(file_cusf_mainchain_v1_validator, 27);

/**
 * Describes the enum cusf.mainchain.v1.Network.
 */
const NetworkSchema = /*@__PURE__*/
  enumDesc(file_cusf_mainchain_v1_validator, 0);

/**
 * @generated from enum cusf.mainchain.v1.Network
 */
const Network = /*@__PURE__*/
  tsEnum(NetworkSchema);

/**
 * @generated from service cusf.mainchain.v1.ValidatorService
 */
const ValidatorService = /*@__PURE__*/
  serviceDesc(file_cusf_mainchain_v1_validator, 0);


exports.file_cusf_mainchain_v1_validator = file_cusf_mainchain_v1_validator;
exports.BlockHeaderInfoSchema = BlockHeaderInfoSchema;
exports.DepositSchema = DepositSchema;
exports.Deposit_OutputSchema = Deposit_OutputSchema;
exports.WithdrawalBundleEventSchema = WithdrawalBundleEventSchema;
exports.WithdrawalBundleEvent_EventSchema = WithdrawalBundleEvent_EventSchema;
exports.WithdrawalBundleEvent_Event_FailedSchema = WithdrawalBundleEvent_Event_FailedSchema;
exports.WithdrawalBundleEvent_Event_SucceededSchema = WithdrawalBundleEvent_Event_SucceededSchema;
exports.WithdrawalBundleEvent_Event_SubmittedSchema = WithdrawalBundleEvent_Event_SubmittedSchema;
exports.BlockInfoSchema = BlockInfoSchema;
exports.BlockInfo_EventSchema = BlockInfo_EventSchema;
exports.GetBlockHeaderInfoRequestSchema = GetBlockHeaderInfoRequestSchema;
exports.GetBlockHeaderInfoResponseSchema = GetBlockHeaderInfoResponseSchema;
exports.GetBlockInfoRequestSchema = GetBlockInfoRequestSchema;
exports.GetBlockInfoResponseSchema = GetBlockInfoResponseSchema;
exports.GetBlockInfoResponse_InfoSchema = GetBlockInfoResponse_InfoSchema;
exports.GetBmmHStarCommitmentRequestSchema = GetBmmHStarCommitmentRequestSchema;
exports.GetBmmHStarCommitmentResponseSchema = GetBmmHStarCommitmentResponseSchema;
exports.GetBmmHStarCommitmentResponse_BlockNotFoundErrorSchema = GetBmmHStarCommitmentResponse_BlockNotFoundErrorSchema;
exports.GetBmmHStarCommitmentResponse_OptionalCommitmentSchema = GetBmmHStarCommitmentResponse_OptionalCommitmentSchema;
exports.GetBmmHStarCommitmentResponse_CommitmentSchema = GetBmmHStarCommitmentResponse_CommitmentSchema;
exports.GetChainInfoRequestSchema = GetChainInfoRequestSchema;
exports.GetChainInfoResponseSchema = GetChainInfoResponseSchema;
exports.GetChainTipRequestSchema = GetChainTipRequestSchema;
exports.GetChainTipResponseSchema = GetChainTipResponseSchema;
exports.GetCoinbasePSBTRequestSchema = GetCoinbasePSBTRequestSchema;
exports.GetCoinbasePSBTRequest_ProposeSidechainSchema = GetCoinbasePSBTRequest_ProposeSidechainSchema;
exports.GetCoinbasePSBTRequest_AckSidechainSchema = GetCoinbasePSBTRequest_AckSidechainSchema;
exports.GetCoinbasePSBTRequest_ProposeBundleSchema = GetCoinbasePSBTRequest_ProposeBundleSchema;
exports.GetCoinbasePSBTRequest_AckBundlesSchema = GetCoinbasePSBTRequest_AckBundlesSchema;
exports.GetCoinbasePSBTRequest_AckBundles_RepeatPreviousSchema = GetCoinbasePSBTRequest_AckBundles_RepeatPreviousSchema;
exports.GetCoinbasePSBTRequest_AckBundles_LeadingBy50Schema = GetCoinbasePSBTRequest_AckBundles_LeadingBy50Schema;
exports.GetCoinbasePSBTRequest_AckBundles_UpvotesSchema = GetCoinbasePSBTRequest_AckBundles_UpvotesSchema;
exports.GetCoinbasePSBTResponseSchema = GetCoinbasePSBTResponseSchema;
exports.GetCtipRequestSchema = GetCtipRequestSchema;
exports.GetCtipResponseSchema = GetCtipResponseSchema;
exports.GetCtipResponse_CtipSchema = GetCtipResponse_CtipSchema;
exports.GetSidechainProposalsRequestSchema = GetSidechainProposalsRequestSchema;
exports.GetSidechainProposalsResponseSchema = GetSidechainProposalsResponseSchema;
exports.GetSidechainProposalsResponse_SidechainProposalSchema = GetSidechainProposalsResponse_SidechainProposalSchema;
exports.GetSidechainsRequestSchema = GetSidechainsRequestSchema;
exports.GetSidechainsResponseSchema = GetSidechainsResponseSchema;
exports.GetSidechainsResponse_SidechainInfoSchema = GetSidechainsResponse_SidechainInfoSchema;
exports.GetTwoWayPegDataRequestSchema = GetTwoWayPegDataRequestSchema;
exports.GetTwoWayPegDataResponseSchema = GetTwoWayPegDataResponseSchema;
exports.GetTwoWayPegDataResponse_ResponseItemSchema = GetTwoWayPegDataResponse_ResponseItemSchema;
exports.SubscribeEventsRequestSchema = SubscribeEventsRequestSchema;
exports.SubscribeEventsResponseSchema = SubscribeEventsResponseSchema;
exports.SubscribeEventsResponse_EventSchema = SubscribeEventsResponse_EventSchema;
exports.SubscribeEventsResponse_Event_ConnectBlockSchema = SubscribeEventsResponse_Event_ConnectBlockSchema;
exports.SubscribeEventsResponse_Event_DisconnectBlockSchema = SubscribeEventsResponse_Event_DisconnectBlockSchema;
exports.SubscribeHeaderSyncProgressRequestSchema = SubscribeHeaderSyncProgressRequestSchema;
exports.SubscribeHeaderSyncProgressResponseSchema = SubscribeHeaderSyncProgressResponseSchema;
exports.NetworkSchema = NetworkSchema;
exports.Network = Network;
exports.ValidatorService = ValidatorService;
