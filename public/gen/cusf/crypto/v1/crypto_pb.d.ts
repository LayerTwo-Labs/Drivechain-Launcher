// CUSF crypto service 

// @generated by protoc-gen-es v2.2.5 with parameter "js_import_style=legacy_commonjs"
// @generated from file cusf/crypto/v1/crypto.proto (package cusf.crypto.v1, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import type { Message } from "@bufbuild/protobuf";
import type { ConsensusHex, Hex } from "../../common/v1/common_pb";

/**
 * Describes the file cusf/crypto/v1/crypto.proto.
 */
export declare const file_cusf_crypto_v1_crypto: GenFile;

/**
 * @generated from message cusf.crypto.v1.HmacSha512Request
 */
export declare type HmacSha512Request = Message<"cusf.crypto.v1.HmacSha512Request"> & {
  /**
   * @generated from field: cusf.common.v1.Hex key = 1;
   */
  key?: Hex;

  /**
   * @generated from field: cusf.common.v1.Hex msg = 2;
   */
  msg?: Hex;
};

/**
 * Describes the message cusf.crypto.v1.HmacSha512Request.
 * Use `create(HmacSha512RequestSchema)` to create a new message.
 */
export declare const HmacSha512RequestSchema: GenMessage<HmacSha512Request>;

/**
 * @generated from message cusf.crypto.v1.HmacSha512Response
 */
export declare type HmacSha512Response = Message<"cusf.crypto.v1.HmacSha512Response"> & {
  /**
   * @generated from field: cusf.common.v1.Hex hmac = 1;
   */
  hmac?: Hex;
};

/**
 * Describes the message cusf.crypto.v1.HmacSha512Response.
 * Use `create(HmacSha512ResponseSchema)` to create a new message.
 */
export declare const HmacSha512ResponseSchema: GenMessage<HmacSha512Response>;

/**
 * @generated from message cusf.crypto.v1.Ripemd160Request
 */
export declare type Ripemd160Request = Message<"cusf.crypto.v1.Ripemd160Request"> & {
  /**
   * @generated from field: cusf.common.v1.Hex msg = 1;
   */
  msg?: Hex;
};

/**
 * Describes the message cusf.crypto.v1.Ripemd160Request.
 * Use `create(Ripemd160RequestSchema)` to create a new message.
 */
export declare const Ripemd160RequestSchema: GenMessage<Ripemd160Request>;

/**
 * @generated from message cusf.crypto.v1.Ripemd160Response
 */
export declare type Ripemd160Response = Message<"cusf.crypto.v1.Ripemd160Response"> & {
  /**
   * @generated from field: cusf.common.v1.Hex digest = 1;
   */
  digest?: Hex;
};

/**
 * Describes the message cusf.crypto.v1.Ripemd160Response.
 * Use `create(Ripemd160ResponseSchema)` to create a new message.
 */
export declare const Ripemd160ResponseSchema: GenMessage<Ripemd160Response>;

/**
 * @generated from message cusf.crypto.v1.Secp256k1SecretKeyToPublicKeyRequest
 */
export declare type Secp256k1SecretKeyToPublicKeyRequest = Message<"cusf.crypto.v1.Secp256k1SecretKeyToPublicKeyRequest"> & {
  /**
   * @generated from field: cusf.common.v1.ConsensusHex secret_key = 1;
   */
  secretKey?: ConsensusHex;
};

/**
 * Describes the message cusf.crypto.v1.Secp256k1SecretKeyToPublicKeyRequest.
 * Use `create(Secp256k1SecretKeyToPublicKeyRequestSchema)` to create a new message.
 */
export declare const Secp256k1SecretKeyToPublicKeyRequestSchema: GenMessage<Secp256k1SecretKeyToPublicKeyRequest>;

/**
 * @generated from message cusf.crypto.v1.Secp256k1SecretKeyToPublicKeyResponse
 */
export declare type Secp256k1SecretKeyToPublicKeyResponse = Message<"cusf.crypto.v1.Secp256k1SecretKeyToPublicKeyResponse"> & {
  /**
   * @generated from field: cusf.common.v1.ConsensusHex public_key = 1;
   */
  publicKey?: ConsensusHex;
};

/**
 * Describes the message cusf.crypto.v1.Secp256k1SecretKeyToPublicKeyResponse.
 * Use `create(Secp256k1SecretKeyToPublicKeyResponseSchema)` to create a new message.
 */
export declare const Secp256k1SecretKeyToPublicKeyResponseSchema: GenMessage<Secp256k1SecretKeyToPublicKeyResponse>;

/**
 * @generated from message cusf.crypto.v1.Secp256k1SignRequest
 */
export declare type Secp256k1SignRequest = Message<"cusf.crypto.v1.Secp256k1SignRequest"> & {
  /**
   * @generated from field: cusf.common.v1.Hex message = 1;
   */
  message?: Hex;

  /**
   * @generated from field: cusf.common.v1.ConsensusHex secret_key = 2;
   */
  secretKey?: ConsensusHex;
};

/**
 * Describes the message cusf.crypto.v1.Secp256k1SignRequest.
 * Use `create(Secp256k1SignRequestSchema)` to create a new message.
 */
export declare const Secp256k1SignRequestSchema: GenMessage<Secp256k1SignRequest>;

/**
 * @generated from message cusf.crypto.v1.Secp256k1SignResponse
 */
export declare type Secp256k1SignResponse = Message<"cusf.crypto.v1.Secp256k1SignResponse"> & {
  /**
   * @generated from field: cusf.common.v1.Hex signature = 1;
   */
  signature?: Hex;
};

/**
 * Describes the message cusf.crypto.v1.Secp256k1SignResponse.
 * Use `create(Secp256k1SignResponseSchema)` to create a new message.
 */
export declare const Secp256k1SignResponseSchema: GenMessage<Secp256k1SignResponse>;

/**
 * @generated from message cusf.crypto.v1.Secp256k1VerifyRequest
 */
export declare type Secp256k1VerifyRequest = Message<"cusf.crypto.v1.Secp256k1VerifyRequest"> & {
  /**
   * @generated from field: cusf.common.v1.Hex message = 1;
   */
  message?: Hex;

  /**
   * @generated from field: cusf.common.v1.Hex signature = 2;
   */
  signature?: Hex;

  /**
   * @generated from field: cusf.common.v1.ConsensusHex public_key = 3;
   */
  publicKey?: ConsensusHex;
};

/**
 * Describes the message cusf.crypto.v1.Secp256k1VerifyRequest.
 * Use `create(Secp256k1VerifyRequestSchema)` to create a new message.
 */
export declare const Secp256k1VerifyRequestSchema: GenMessage<Secp256k1VerifyRequest>;

/**
 * @generated from message cusf.crypto.v1.Secp256k1VerifyResponse
 */
export declare type Secp256k1VerifyResponse = Message<"cusf.crypto.v1.Secp256k1VerifyResponse"> & {
  /**
   * @generated from field: bool valid = 1;
   */
  valid: boolean;
};

/**
 * Describes the message cusf.crypto.v1.Secp256k1VerifyResponse.
 * Use `create(Secp256k1VerifyResponseSchema)` to create a new message.
 */
export declare const Secp256k1VerifyResponseSchema: GenMessage<Secp256k1VerifyResponse>;

/**
 * @generated from service cusf.crypto.v1.CryptoService
 */
export declare const CryptoService: GenService<{
  /**
   * @generated from rpc cusf.crypto.v1.CryptoService.HmacSha512
   */
  hmacSha512: {
    methodKind: "unary";
    input: typeof HmacSha512RequestSchema;
    output: typeof HmacSha512ResponseSchema;
  },
  /**
   * @generated from rpc cusf.crypto.v1.CryptoService.Ripemd160
   */
  ripemd160: {
    methodKind: "unary";
    input: typeof Ripemd160RequestSchema;
    output: typeof Ripemd160ResponseSchema;
  },
  /**
   * @generated from rpc cusf.crypto.v1.CryptoService.Secp256k1SecretKeyToPublicKey
   */
  secp256k1SecretKeyToPublicKey: {
    methodKind: "unary";
    input: typeof Secp256k1SecretKeyToPublicKeyRequestSchema;
    output: typeof Secp256k1SecretKeyToPublicKeyResponseSchema;
  },
  /**
   * @generated from rpc cusf.crypto.v1.CryptoService.Secp256k1Sign
   */
  secp256k1Sign: {
    methodKind: "unary";
    input: typeof Secp256k1SignRequestSchema;
    output: typeof Secp256k1SignResponseSchema;
  },
  /**
   * @generated from rpc cusf.crypto.v1.CryptoService.Secp256k1Verify
   */
  secp256k1Verify: {
    methodKind: "unary";
    input: typeof Secp256k1VerifyRequestSchema;
    output: typeof Secp256k1VerifyResponseSchema;
  },
}>;

